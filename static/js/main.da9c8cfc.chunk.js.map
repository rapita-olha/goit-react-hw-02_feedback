{"version":3,"sources":["components/Section/Section.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","className","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","toUpperCase","slice","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","leaveFeedback","e","targetBtn","target","textContent","toLowerCase","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAeeA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,0BAASC,UAAU,QAAnB,UACE,6BAAKF,IACJC,MCgBUE,EAnBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACE,oBAAIH,UAAU,gBAAd,SACGE,EAAQE,KAAI,SAAAC,GAAM,OACjB,oBAAiBL,UAAU,gBAA3B,SACE,wBAAQM,KAAK,SAASN,UAAU,MAAMO,QAASJ,EAA/C,SACGE,EAAO,GAAGG,cAAgBH,EAAOI,MAAM,MAFnCJ,WCmBFK,EAvBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OAEjB,aADA,CACA,gBACE,qBAAIf,UAAU,kBAAd,UACE,qBAAIA,UAAU,kBAAd,mBAAuCW,KACvC,qBAAIX,UAAU,kBAAd,sBAA0CY,KAC1C,qBAAIZ,UAAU,kBAAd,kBAAsCa,KACtC,qBAAIb,UAAU,kBAAd,oBAAwCc,KACxC,qBAAId,UAAU,kBAAd,gCACsBe,EADtB,aCFSC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGjB,UAAU,eAAb,SAA6BiB,KCM7DC,G,kNAEJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,cAAgB,SAAAC,GACd,IAAMC,EAAYD,EAAEE,OAAOC,YAAYC,cAEvC,EAAKC,UAAS,SAAAC,GAAS,kCAClBA,GADkB,kBAEpBL,EAAYK,EAAUL,GAAa,Q,EAIxCM,mBAAqB,WACnB,MAA+B,EAAKT,MACpC,OADA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBgB,gCAAkC,WAChC,MAA+B,EAAKV,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OAAOiB,KAAKC,MAAc,IAAPpB,GAAeA,EAAOC,EAAUC,K,4CAGrD,WACE,MAA+BmB,KAAKb,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,sBAAKb,UAAU,YAAf,UACE,oBAAIA,UAAU,kBAAd,sBACA,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CACEI,QAAS+B,OAAOC,KAAKF,KAAKb,OAE1BhB,gBAAiB6B,KAAKZ,kBAG1B,cAAC,EAAD,CAAStB,MAAM,aAAf,SACiC,IAA9BkC,KAAKJ,qBACJ,cAAC,EAAD,CAAcX,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,KAAKJ,qBACZb,mBAAoBiB,KAAKH,6C,GAjDrBM,cA0DHjB,IC7DfkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.da9c8cfc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section className=\"title\">\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div>\n    <ul className=\"feedback_list\">\n      {options.map(option => (\n        <li key={option} className=\"feedback_item\">\n          <button type=\"submit\" className=\"btn\" onClick={onLeaveFeedback}>\n            {option[0].toUpperCase() + option.slice(1)}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  // const Statistics = props => (\n  <div>\n    <ul className=\"statistics_list\">\n      <li className=\"statistics_item\">Good: {good}</li>\n      <li className=\"statistics_item\">Neutral: {neutral}</li>\n      <li className=\"statistics_item\">Bad: {bad}</li>\n      <li className=\"statistics_item\">Total: {total}</li>\n      <li className=\"statistics_item\">\n        Positive feedback: {positivePercentage}%\n      </li>\n    </ul>\n  </div>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p className=\"notification\">{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\n\nimport Section from './components/Section';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\nimport Statistics from './components/Feedback/Statistics';\nimport Notification from './components/Notification';\n\nimport './App.scss';\n\nclass App extends Component {\n  \n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  leaveFeedback = e => {\n    const targetBtn = e.target.textContent.toLowerCase();\n\n    this.setState(prevState => ({\n      ...prevState,\n      [targetBtn]: prevState[targetBtn] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    return Math.round((good * 100) / (good + neutral + bad));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"visually_hidden\">Feedback</h1>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            // options={options}\n            onLeaveFeedback={this.leaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}